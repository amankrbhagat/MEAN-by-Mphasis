Examples of Tab Index:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabindex Example</title>
</head>
<body>
    <h1>Tabindex Example</h1>

    <a href="#" tabindex="3">Link 3</a>
    <a href="#" tabindex="1">Link 1</a>
    <a href="#" tabindex="2">Link 2</a>
    <input type="text" tabindex="4" placeholder="Input Field">
</body>
</html>


Example 1: Default Tab Order (Without tabindex)

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Default Tab Order</title>
</head>
<body>
  <h2>Default Tab Order Example</h2>
  <input type="text" placeholder="First Name">
  <input type="text" placeholder="Last Name">
  <button>Submit</button>
</body>
</html>


Explanation: Without tabindex, elements like inputs and buttons will follow the natural tab order, which is based on their position in the HTML source code.


Example 2: Custom Tab Order Using tabindex

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Custom Tab Order</title>
</head>
<body>
  <h2>Custom Tab Order Example</h2>
  <input type="text" placeholder="First Name" tabindex="2">
  <input type="text" placeholder="Last Name" tabindex="1">
  <button tabindex="3">Submit</button>
</body>
</html>

Explanation: Here, we’ve changed the tab order by assigning tabindex values. The "Last Name" field gets focus first, followed by the "First Name" field, and then the "Submit" button.

Example 3: Removing an Element from Tab Order

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Removing from Tab Order</title>
</head>
<body>
  <h2>Remove an Element from Tab Order Example</h2>
  <input type="text" placeholder="First Name">
  <input type="text" placeholder="Last Name" tabindex="-1">
  <button>Submit</button>
</body>
</html>

Explanation: The "Last Name" field has tabindex="-1", which removes it from the tab order. The user will skip this field when navigating with the "Tab" key.


Example 4: Adding Non-Focusable Elements to the Tab Order

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Non-focusable Elements in Tab Order</title>
</head>
<body>
  <h2>Adding Non-focusable Elements to Tab Order Example</h2>
  <p tabindex="1">This paragraph is focusable using the tab key.</p>
  <div tabindex="2">This div is also focusable using the tab key.</div>
  <a href="#" tabindex="3">This link is focusable and clickable.</a>
</body>
</html>


Example 5: Using tabindex="0" for Dynamic Focus Order

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tabindex 0</title>
</head>
<body>
  <h2>Tabindex "0" Example</h2>
  <p tabindex="0">This element follows the natural flow of the document for focus.</p>
  <input type="text" placeholder="Email">
  <button>Submit</button>
</body>
</html>


Explanation: Elements with tabindex="0" are focusable and follow the natural order of the document, meaning they are inserted into the tab order where they appear in the source code.

Examples of Access Key:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Access Key Example</title>
</head>
<body>
    <h1>HTML Access Key Example</h1>
    <p>Use the following access keys to navigate:</p>
    <ul>
        <li><a href="#home" accesskey="h">Home (Press Alt + H)</a></li>
        <li><a href="#about" accesskey="a">About (Press Alt + A)</a></li>
        <li><a href="#contact" accesskey="c">Contact (Press Alt + C)</a></li>
    </ul>

    <section id="home">
        <h2>Home Section</h2>
        <p>Welcome to the home section.</p>
    </section>

    <section id="about">
        <h2>About Section</h2>
        <p>This section contains information about us.</p>
    </section>

    <section id="contact">
        <h2>Contact Section</h2>
        <p>This section contains contact information.</p>
    </section>
</body>
</html>


How to Use Access Keys
The way access keys are used depends on the browser and the operating system. Typically, users press a combination of keys to trigger the access key action. Here are common combinations:

Windows (Chrome, Edge, Internet Explorer): Alt + AccessKey
Windows (Firefox): Alt + Shift + AccessKey
Mac (Safari, Chrome, Firefox): Ctrl + Option + AccessKey


Adding Multiple Forms

To handle multiple forms on the same page, create multiple <form> elements with unique action attributes. Here's an example:


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multiple Forms Example</title>
</head>
<body>

  <!-- Form 1: Login Form -->
  <h2>Login Form</h2>
  <form action="/login" method="POST">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username"><br>

    <label for="password">Password:</label>
    <input type="password" id="password" name="password"><br>

    <input type="submit" value="Login">
  </form>

  <!-- Form 2: Registration Form -->
  <h2>Registration Form</h2>
  <form action="/register" method="POST">
    <label for="reg-name">Name:</label>
    <input type="text" id="reg-name" name="reg-name"><br>

    <label for="reg-email">Email:</label>
    <input type="email" id="reg-email" name="reg-email"><br>

    <label for="reg-password">Password:</label>
    <input type="password" id="reg-password" name="reg-password"><br>

    <input type="submit" value="Register">
  </form>

</body>
</html>


1. Embedding a Video File Using <object>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Example with Object Element</title>
</head>
<body>
    <h2>Video Example using &lt;object&gt; element</h2>

    <object data="video.mp4" type="video/mp4" width="640" height="360">
        <!-- Fallback content if the browser does not support the video -->
        Your browser does not support embedding videos using the <code>&lt;object&gt;</code> tag. 
        <a href="video.mp4">Download the video instead</a>.
    </object>

</body>
</html>


2. Embedding an Audio File Using <object>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Audio Example with Object Element</title>
</head>
<body>
    <h2>Audio Example using &lt;object&gt; element</h2>

    <object data="audio.mp3" type="audio/mpeg" width="300" height="32">
        <!-- Fallback content if the browser does not support the audio -->
        Your browser does not support embedding audio using the <code>&lt;object&gt;</code> tag. 
        <a href="audio.mp3">Download the audio file instead</a>.
    </object>

</body>
</html>


Examples of JavaScript API:

Canvas API:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canvas API Example</title>
</head>
<body>
    <canvas id="myCanvas" width="400" height="400" style="border:1px solid #000000;"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        // Draw a rectangle
        ctx.fillStyle = 'blue';
        ctx.fillRect(50, 50, 150, 100);

        // Draw a circle
        ctx.beginPath();
        ctx.arc(200, 200, 50, 0, 2 * Math.PI);
        ctx.stroke();
    </script>
</body>
</html>


Geolocation API Example:

Example: Getting User Location

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Geolocation API Example</title>
</head>
<body>
    <button onclick="getLocation()">Get Location</button>
    <p id="location"></p>
    <script>
        function getLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                document.getElementById('location').innerText = "Geolocation is not supported by this browser.";
            }
        }

        function showPosition(position) {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;
            document.getElementById('location').innerText = `Latitude: ${lat}, Longitude: ${lon}`;
        }
    </script>
</body>
</html>

Example: Using Local Storage

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Storage API Example</title>
</head>
<body>
    <input type="text" id="inputField" placeholder="Enter something">
    <button onclick="saveData()">Save</button>
    <button onclick="loadData()">Load</button>
    <p id="savedData"></p>
    <script>
        function saveData() {
            const input = document.getElementById('inputField').value;
            localStorage.setItem('myData', input);
        }

        function loadData() {
            const savedData = localStorage.getItem('myData');
            document.getElementById('savedData').innerText = savedData ? savedData : "No data found.";
        }
    </script>
</body>
</html>


Example: Using Web Workers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Workers API Example</title>
</head>
<body>
    <button onclick="startWorker()">Start Worker</button>
    <p id="workerResult"></p>
    <script>
        let worker;

        function startWorker() {
            if (typeof(Worker) !== "undefined") {
                if (typeof(worker) === "undefined") {
                    worker = new Worker("worker.js");
                }
                worker.onmessage = function(event) {
                    document.getElementById('workerResult').innerText = event.data;
                };
                worker.postMessage("Hello, worker!");
            } else {
                document.getElementById('workerResult').innerText = "Sorry, your browser does not support Web Workers...";
            }
        }
    </script>
</body>
</html>

Example: Simple WebRTC Video Chat


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC API Example</title>
</head>
<body>
    <video id="localVideo" autoplay></video>
    <video id="remoteVideo" autoplay></video>
    <script>
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        let localStream;

        navigator.mediaDevices.getUserMedia({ video: true, audio: true })
            .then(stream => {
                localVideo.srcObject = stream;
                localStream = stream;
                // For a real application, you'd use RTCPeerConnection here to connect to a remote peer
            })
            .catch(error => {
                console.error('Error accessing media devices.', error);
            });
    </script>
</body>
</html>


Markup Example Before and After HTML5:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Website Layout Before HTML5</title>
</head>
<body>
    <div id="header">
        <h1>Website Title</h1>
    </div>

    <div id="nav">
        <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">About</a></li>
            <li><a href="#">Contact</a></li>
        </ul>
    </div>

    <div id="content">
        <h2>Welcome to the Website</h2>
        <p>This is the main content section of the webpage.</p>
    </div>

    <div id="footer">
        <p>&copy; 2024 Website Name. All rights reserved.</p>
    </div>
</body>
</html>


After  HTML5 :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Website Layout After HTML5</title>
</head>
<body>
    <header>
        <h1>Website Title</h1>
    </header>

    <nav>
        <ul>
            <li><a href="#">Home</a></li>
            <li><a href="#">About</a></li>
            <li><a href="#">Contact</a></li>
        </ul>
    </nav>

    <main>
        <article>
            <h2>Welcome to the Website</h2>
            <p>This is the main content section of the webpage.</p>
        </article>
    </main>

    <footer>
        <p>&copy; 2024 Website Name. All rights reserved.</p>
    </footer>
</body>
</html>





Differences Between Outlines in HTML4 and HTML5

HTML4 and HTML5 differ significantly in how they handle document outlines. HTML5 introduced new semantic elements and better structuring, which affects how outlines are generated in a webpage.

1. Outline Concept in HTML4

No Native Outline Algorithm: HTML4 doesn’t have a formal outlining algorithm to create a document structure.

Heading Elements (h1–h6): The document structure is mostly created by heading elements (<h1>, <h2>, ..., <h6>). These represent a linear hierarchy where headings indicate the start of a new section, but no detailed mechanism exists for creating a structured, nested outline.

Manual Outlining: Web developers need to manually ensure that the heading elements reflect the content structure. It’s common to see nested sections rely on proper ordering of heading tags, but this is error-prone and inconsistent.

2. Outline Concept in HTML5

Native Outlining Algorithm: HTML5 introduced an algorithm that helps automatically create a structured document outline based on semantic elements and content.

New Semantic Elements: HTML5 introduced elements like <article>, <section>, <aside>, <header>, <footer>, and <nav>. These elements naturally create sections in the document and can be nested, making the outline more hierarchical and semantically meaningful.

Each <section>, <article>, and other semantic elements create a new section in the document outline.

Implicit Sectioning: When you use the <h1> to <h6> elements inside sectioning elements (like <article> or <section>), HTML5 automatically calculates the heading levels, making outlines more flexible and easier to manage.

3. Key Differences in Outline Algorithm

HTML4: There’s no built-in outline mechanism, so the order and levels of headings must be maintained manually. Improper use of headings can result in a poorly structured document.
HTML5: The browser uses an algorithm to create an outline based on the structure of the semantic elements. You no longer have to manually manage heading levels since sectioning elements like <article> and <section> manage their own subheadings.

4. Examples

HTML4 Example:

<h1>Main Heading</h1>
<p>Introduction content here.</p>

<h2>Subheading 1</h2>
<p>Details under subheading 1.</p>

<h3>Sub-subheading 1.1</h3>
<p>More details under subheading 1.1.</p>

<h2>Subheading 2</h2>
<p>Details under subheading 2.</p>

In HTML4, heading elements represent the document structure manually, with no specific algorithm or sectioning.

HTML5 Example:


<article>
  <header>
    <h1>Main Article Heading</h1>
  </header>
  <section>
    <h2>Subheading 1</h2>
    <p>Details under subheading 1.</p>
  </section>
  <section>
    <h2>Subheading 2</h2>
    <p>Details under subheading 2.</p>
  </section>
</article>
In HTML5, the <article> and <section> tags automatically create sections in the outline, and the headings are contextually part of these sections, leading to a well-structured and meaningful outline.

5. Benefits of HTML5 Outlining

Improved Accessibility: Screen readers and other assistive technologies can better understand the document’s structure due to the semantic elements and the HTML5 outlining algorithm.
SEO Advantages: Search engines like Google can understand the hierarchical structure of content, leading to better indexing and ranking.
Cleaner Code: HTML5 allows for better-structured, easier-to-maintain code through the use of semantic elements, rather than relying solely on <div> and heading tags.

6. Limitations

Browser Support: Although HTML5 introduced the outline algorithm, not all browsers fully implemented it consistently. As a result, developers need to be cautious when relying on it.
Outlining Tools: Outlining tools for HTML5 may not always produce reliable results across all browsers.


Text-level Semantic Elements:


Text-level semantic elements in HTML are used to define the meaning and structure of text within a web document. These elements don't change the appearance of the text but help to give it semantic meaning, improving accessibility and SEO.

Here’s a breakdown of the commonly used text-level semantic elements, along with explanations and examples:

1. <strong>
Purpose: Indicates that text is of strong importance. Typically, it is displayed as bold text by default.
Example:
<p>This is <strong>important</strong> text.</p>
Output: This is important text.

2. <em>
Purpose: Stands for "emphasis." It marks text that should be emphasized. Usually, it’s displayed as italic by default.
Example:
<p>This is <em>emphasized</em> text.</p>
Output: This is emphasized text.

3. <b>
Purpose: Represents text to be stylistically different from normal text, often bold. It's less about importance and more about distinction.
Example:
<p>This is <b>bold</b> text.</p>
Output: This is bold text.

4. <i>
Purpose: Used for text that is set off from normal text, such as foreign phrases, idiomatic expressions, or titles of works. Typically, it’s italicized.

Example:
<p>This is an <i>italic</i> word.</p>
Output: This is an italic word.

5. <u>
Purpose: Stands for "underline." It is used to underline text, typically for stylistic purposes.
Example:
<p>This is <u>underlined</u> text.</p>
Output: This is underlined text.

6. <small>
Purpose: Represents side comments, disclaimers, or small print. It typically renders text in a smaller font size.
Example:
<p>This is <small>smaller</small> text.</p>
Output: This is smaller text.

7. <mark>
Purpose: Used to highlight text. It typically renders with a yellow background by default.
Example:
<p>This is <mark>highlighted</mark> text.</p>
Output: This is highlighted text.
8. <del>
Purpose: Represents text that has been deleted or marked as incorrect. It usually renders as strikethrough text.
Example:
<p>This is <del>deleted</del> text.</p>
Output: This is deleted text.
9. <ins>
Purpose: Marks inserted text, often used in conjunction with <del>. It is typically underlined by default.
Example:
<p>This is <ins>inserted</ins> text.</p>
Output: This is inserted text.

10. <abbr>
Purpose: Defines an abbreviation or acronym, and can provide additional information in the form of a tooltip when hovered over.
Example:

<p>The <abbr title="World Health Organization">WHO</abbr> was established in 1948.</p>

Output: The WHO was established in 1948. (When hovered, it shows “World Health Organization”)

11. <code>
Purpose: Used to display inline code snippets.
Example:
<p>The function <code>print()</code> outputs text to the console.</p>
Output: The function print() outputs text to the console.

12. <samp>
Purpose: Represents sample output from a computer program.

Example:

<p>The output is <samp>Hello World</samp>.</p>

Output: The output is Hello World.

13. <kbd>
Purpose: Represents user input from the keyboard.

Example:
<p>Press <kbd>Ctrl</kbd> + <kbd>C</kbd> to copy.</p>

Output: Press Ctrl + C to copy.

14. <var>
Purpose: Represents a variable in programming or a mathematical expression.

Example:
<p>The variable <var>x</var> equals 5.</p>

Output: The variable x equals 5.

15. <cite>

Purpose: Represents the title of a work, like a book or paper.
Example:

<p>This is a reference to <cite>Harry Potter</cite>.</p>
Output: This is a reference to Harry Potter.


Semantic Forms:


Creating semantic forms from scratch involves using semantic HTML tags to structure forms, ensuring that the form elements are meaningful, accessible, and easy to understand for both users and search engines. Semantic HTML5 elements improve the overall structure and clarity of the document.

Here’s a step-by-step guide on building semantic forms:

1. Basic Structure
Start by using the appropriate semantic HTML tags like <form>, <label>, <input>, and <button>.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Semantic Form Example</title>
</head>
<body>
    <h1>Contact Us</h1>
    
    <form action="/submit-form" method="POST">
        <!-- Name Field -->
        <div>
            <label for="name">Name:</label>
            <input type="text" id="name" name="name" placeholder="Enter your name" required>
        </div>

        <!-- Email Field -->
        <div>
            <label for="email">Email:</label>
            <input type="email" id="email" name="email" placeholder="Enter your email" required>
        </div>

        <!-- Message Field -->
        <div>
            <label for="message">Message:</label>
            <textarea id="message" name="message" rows="4" placeholder="Write your message here" required></textarea>
        </div>

        <!-- Submit Button -->
        <div>
            <button type="submit">Submit</button>
        </div>
    </form>
</body>
</html>
2. Key Semantic Elements
<form>: Wraps the entire form and includes attributes like action (where the form data is sent) and method (POST, GET).
<label>: Associates a text description with form controls (<input>, <textarea>, etc.). Using for attribute connects it to the corresponding input field's id.
<input>: For input controls such as text, email, etc. Always specify name and type attributes.
<textarea>: Used for larger text input fields.
<button>: For submitting the form.
3. Best Practices
Use descriptive labels: Always use the <label> element to make forms accessible. The for attribute should match the id of the related input.

Required fields: Use the required attribute to make fields mandatory.

Placeholder text: Provide helpful hints about what to input.

Validation: Use basic HTML5 form validation attributes like required, pattern, and type (for emails, URLs, etc.).

4. Advanced Example
Here’s a more detailed semantic form example with additional input types and accessibility considerations:

<form action="/submit" method="POST">
    <!-- Full Name -->
    <div>
        <label for="full-name">Full Name:</label>
        <input type="text" id="full-name" name="fullName" placeholder="John Doe" required>
    </div>

    <!-- Email -->
    <div>
        <label for="email">Email Address:</label>
        <input type="email" id="email" name="email" placeholder="name@example.com" required>
    </div>

    <!-- Password -->
    <div>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>

    <!-- Date of Birth -->
    <div>
        <label for="dob">Date of Birth:</label>
        <input type="date" id="dob" name="dob">
    </div>

    <!-- Gender -->
    <div>
        <fieldset>
            <legend>Gender:</legend>
            <label><input type="radio" name="gender" value="male"> Male</label>
            <label><input type="radio" name="gender" value="female"> Female</label>
        </fieldset>
    </div>

    <!-- Country -->
    <div>
        <label for="country">Country:</label>
        <select id="country" name="country">
            <option value="">Select Country</option>
            <option value="us">United States</option>
            <option value="ca">Canada</option>
            <option value="uk">United Kingdom</option>
        </select>
    </div>

    <!-- Terms and Conditions -->
    <div>
        <label>
            <input type="checkbox" name="terms" required> I agree to the terms and conditions
        </label>
    </div>

    <!-- Submit -->
    <div>
        <button type="submit">Submit</button>
    </div>
</form>

5. Styling Semantic Forms (Optional)

Using CSS, you can style your form to make it more user-friendly.


form {
    max-width: 500px;
    margin: 0 auto;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

form div {
    margin-bottom: 15px;
}

label {
    font-weight: bold;
    display: block;
    margin-bottom: 5px;
}

input, select, textarea, button {
    width: 100%;
    padding: 10px;
    border-radius: 4px;
    border: 1px solid #ccc;
}

button {
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

6. Accessibility Considerations

ARIA attributes: Use ARIA roles and attributes for better accessibility when needed.
Keyboard navigation: Ensure that the form can be navigated via keyboard.
Screen reader support: Semantic HTML elements improve compatibility with screen readers.


Using the Datalist Tag:


The <datalist> tag in HTML is used to provide an "autocomplete" feature for input fields, allowing users to select from predefined options as they type. It doesn't display a drop-down menu like <select>, but instead suggests options when the user types into an <input> field.

Here’s a step-by-step guide on how to use the <datalist> tag from scratch:

Basic Usage of <datalist>
Create an Input Field: The <input> field will be linked to a <datalist> to provide suggestions.
Create a <datalist> Element: Inside the <datalist>, you can define various <option> elements that will serve as the suggested values.
Link the Input and Datalist: Use the list attribute in the <input> element to connect it to the <datalist>.
Example
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Datalist Example</title>
</head>
<body>

    <h2>Choose a programming language:</h2>

    <!-- Input field with autocomplete -->
    <input type="text" id="language" list="languages" placeholder="Start typing...">

    <!-- Datalist providing autocomplete options -->
    <datalist id="languages">
        <option value="JavaScript">
        <option value="Python">
        <option value="Java">
        <option value="C++">
        <option value="Ruby">
        <option value="PHP">
    </datalist>

</body>
</html>

How It Works:

Input Field (<input>): When the user types into this field, it looks at the associated <datalist> element and shows 
matching options as suggestions.

Datalist (<datalist>): Contains a set of <option> elements, each defining a suggestion. The user can select one of these or enter a custom value.

Features:

Typeahead Suggestion: The user starts typing, and the suggestions appear in a dropdown below the input.
Custom Entries: The user can still input custom values if none of the suggestions fit.
Cross-Browser Support: The <datalist> is widely supported by modern browsers but may not work in older browsers like Internet Explorer.
More Complex Example
You can also include more complex use cases, such as using multiple data lists or having a pre-selected value.


